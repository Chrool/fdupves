CMAKE_MINIMUM_REQUIRED (VERSION 2.6)

PROJECT (fdupves "C")

SET (PROJECT_MAJOR      "0")
SET (PROJECT_MINOR      "0")
SET (PROJECT_PATCH      "1")

ADD_DEFINITIONS (
  -DPACKAGE="${PROJECT_NAME}"
  -DPACKAGE_STRING="${PROJECT_NAME} ${PROJECT_MAJOR}.${PROJECT_MINOR}.${PROJECT_PATCH}"
  -DPROJECT_MAJOR="${PROJECT_MAJOR}"
  -DPROJECT_MINOR="${PROJECT_MINOR}"
  -DPROJECT_PATCH="${PROJECT_PATCH}"
  -DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX}"
  )

FIND_PACKAGE (PkgConfig)
PKG_CHECK_MODULES (GTK2 gtk+-2.0 REQUIRED)
PKG_CHECK_MODULES (AVFORMAT libavformat REQUIRED)
PKG_CHECK_MODULES (AVCODEC libavcodec REQUIRED)
PKG_CHECK_MODULES (AVUTIL libavutil REQUIRED)
PKG_CHECK_MODULES (SWSCALE libswscale REQUIRED)

IF (WIN32)
  INCLUDE (win32/CMakeLists.txt)
ENDIF (WIN32)

INCLUDE_DIRECTORIES (${GTK2_INCLUDE_DIRS}
  ${AVFORMAT_INCLUDE_DIRS}
  ${AVCODEC_INCLUDE_DIRS}
  ${AVUTIL_INCLUDE_DIRS}
  ${SWSCALE_INCLUDE_DIRS}
  )
LINK_DIRECTORIES (${CMAKE_CURRENT_BINARY_DIR}
  ${GTK2_LIBRARY_DIRS}
  ${AVFORMAT_LIBRARY_DIRS}
  ${AVCODEC_LIBRARY_DIRS}
  ${AVUTIL_LIBRARY_DIRS}
  ${SWSCALE_LIBRARY_DIRS}
  )

IF (WIN32)
  SET (REQ_LIBRARIES ws2_32.lib)
  ADD_DEFINITIONS (-DWIN32
    -D_CRT_SECURE_NO_WARNINGS)
ELSE (WIN32)
  SET (CMAKE_C_FLAGS "-Wall -D_FILE_OFFSET_BITS=64")
  SET (REQ_LIBRARIES)

  OPTION (FDUPVES_ENABLE_DEBUG "If build binary with debug infomations." OFF)
  IF (FDUPVES_ENABLE_DEBUG)
    SET (CMAKE_C_FLAGS "-D_DEBUG -g ${CMAKE_C_FLAGS}")
  ELSE (FDUPVES_ENABLE_DEBUG)
    SET (CMAKE_C_FLAGS "-O2 -fno-strict-aliasing ${CMAKE_C_FLAGS}")
  ENDIF (FDUPVES_ENABLE_DEBUG)

  OPTION (FDUPVES_ENABLE_MUDFLAP "If build binary with mudflap infomations." OFF)
  IF (FDUPVES_ENABLE_MUDFLAP)
    SET (CMAKE_C_FLAGS "-D_MUDFLAP -fmudflap -fmudflapth -funwind-tables -lmudflapth -rdynamic ${CMAKE_C_FLAGS}")
  ENDIF (FDUPVES_ENABLE_MUDFLAP)

  OPTION (FDUPVES_ENABLE_PROFILER "If build binary with google profiler infomations." OFF)
  IF (FDUPVES_ENABLE_PROFILER)
    SET (CMAKE_C_FLAGS "-DFDUPVES_ENABLE_PROFILER -lprofiler ${CMAKE_C_FLAGS}")
  ENDIF (FDUPVES_ENABLE_PROFILER)
ENDIF (WIN32)

ADD_SUBDIRECTORY (src)

FIND_PACKAGE (Gettext)
IF (GETTEXT_FOUND)
  ADD_SUBDIRECTORY(po)
  ADD_DEPENDENCIES(fdupves translate)
ELSE (GETTEXT_FOUND)
  INSTALL (FILES po/zh_CN.gmo
    DESTINATION share/locale/zh_CN/LC_MESSAGES
    RENAME fdupves.mo)
ENDIF (GETTEXT_FOUND)

INSTALL (DIRECTORY icons
  DESTINATION share/fdupves)
INSTALL (FILES
  fdupvesrc
  DESTINATION etc)

SET (CPACK_PACKAGE_VENDOR "Alf, Inc.")
SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY "fdupves - find duplicate video/image files")
SET (CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_MAJOR})
SET (CPACK_PACKAGE_VERSION_MINOR ${PROJECT_MINOR})
SET (CPACK_PACKAGE_VERSION_PATCH ${PROJECT_PATCH})

IF (UNIX)
  SET (CPACK_SET_DESTDIR ON)
  SET (CPACK_GENERATOR RPM)
  SET (CPACK_RPM_PACKAGE_REQUIRES "gtk2 >= 2.10.4")

  SET (CPACK_SOURCE_PACKAGE_FILE_NAME
    ${CMAKE_PROJECT_NAME}-${PROJECT_MAJOR}.${PROJECT_MINOR}.${PROJECT_PATCH})
  SET (CPACK_SOURCE_GENERATOR TGZ)
  SET (CPACK_SOURCE_IGNORE_FILES
    ${CMAKE_BINARY_DIR}
    ".git"
    ".gitmodules"
    ".gitignore"
    )
ELSE (UNIX)
  SET (CPACK_GENERATOR NSIS)
  SET (CPACK_NSIS_CONTACT "Alf <naihe2010@126.com>")
  SET (CPACK_NSIS_EXTRA_INSTALL_COMMANDS "CreateShortCut '\$DESKTOP\\\\fdupves.lnk' '\$INSTDIR\\\\bin\\\\fdupves.exe'
					#ExecWait '\\\"$INSTDIR\\\\vcredist_x86.exe\\\" /q:a'
					")
  SET (CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "Delete '\$DESKTOP\\\\fdupves.lnk'")
ENDIF (UNIX)

INCLUDE(CPack)
